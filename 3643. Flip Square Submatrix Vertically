You are given an m x n integer matrix grid, and three integers x, y, and k.
The integers x and y represent the row and column indices of the top-left corner of a square submatrix and the integer k represents the size (side length) of the square submatrix.
Your task is to flip the submatrix by reversing the order of its rows vertically.
Return the updated matrix.©leetcode.

SOURCE CODE:

/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as *returnColumnSizes array.
 * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().
 */
int** reverseSubmatrix(int** grid, int gridSize, int* gridColSize, int x, int y, int k, int* returnSize, int** returnColumnSizes) {

    int m=gridSize;
    int n=gridColSize[0];
    int **res=(int **)malloc(m * sizeof(int *));
    *returnColumnSizes=(int *)malloc(m * sizeof(int));

    for(int i=0;i<m;i++){
        res[i]=(int *)malloc(n * sizeof(int));
        (*returnColumnSizes)[i]=n;
        for(int j=0;j<n;j++){
            res[i][j]=grid[i][j];
        }
    }

    for(int i=0;i<k/2;i++){

        int topRow=x+i;
        int bottomRow=x+(k-1-i);
        for(int col=0;col<k;col++){
            int temp=res[topRow][y+col];
            res[topRow][y+col]=res[bottomRow][y+col];
            res[bottomRow][y+col]=temp;
        }
    }
    *returnSize=m;
    return res;
}©leetcode

OUTPUT:

Example 1:

Input: grid = [[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]], x = 1, y = 0, k = 3
Output: [[1,2,3,4],[13,14,15,8],[9,10,11,12],[5,6,7,16]]
Explanation:
The diagram above shows the grid before and after the transformation.

Example 2:
​​​
Input: grid = [[3,4,2,3],[2,3,4,2]], x = 0, y = 2, k = 2
Output: [[3,4,4,2],[2,3,2,3]]
Explanation:
The diagram above shows the grid before and after the transformation.©leetcode
