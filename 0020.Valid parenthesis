Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.
An input string is valid if:
Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Every close bracket has a corresponding open bracket of the same type.
 
SOURCE CODE:

bool isValid(char* s) {
    int len = strlen(s);
    char* stack = (char*)malloc(sizeof(char) * len); 
    int top = -1;

    for (int i = 0; i < len; i++) {
        char c = s[i];

        if (c == '(' || c == '{' || c == '[') {
            stack[++top] = c;
        } else if (c == ')') {
            if (top < 0 || stack[top] != '(') {
                free(stack);
                return false;
            }
            top--;
        } else if (c == '}') {
            if (top < 0 || stack[top] != '{') {
                free(stack);
                return false;
            }
            top--;
        } else if (c == ']') {
            if (top < 0 || stack[top] != '[') {
                free(stack);
                return false;
            }
            top--;
        }
    }

    bool result = (top == -1);
    free(stack);
    return result;
}

OUTPUT:

Example 1:
Input: s = "()"
Output: true

Example 2:
Input: s = "()[]{}"
Output: true

Example 3:
Input: s = "(]"
Output: false

Example 4:
Input: s = "([])"
Output: true

Example 5:
Input: s = "([)]"
OUtput: false
