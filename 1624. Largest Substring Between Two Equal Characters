Given a string s, return the length of the longest substring between two equal characters, excluding the two characters. If there is no such substring return -1.
A substring is a contiguous sequence of characters within a string.

SOURCE CODE:

int maxLengthBetweenEqualCharacters(char* s)
{
    int firsts[256];
    for (int i = 0; i < 256; i++) 
        firsts[i] = -1;

    int max = -1;

    for (int i = 0; s[i] != '\0'; i++) 
    {
        if (firsts[s[i]] >= 0) 
        {
            int diff = i - firsts[s[i]] - 1;
            if (diff > max) 
                max = diff;
        } 
        else 
        {
            firsts[s[i]] = i;
        }
    }

    return max;
}
OUTPUT:

Example 1:
Input: s = "aa"
Output: 0
Explanation: The optimal substring here is an empty substring between the two 'a's.

Example 2:
Input: s = "abca"
Output: 2
Explanation: The optimal substring here is "bc".

Example 3:
Input: s = "cbzxy"
Output: -1
Explanation: There are no characters that appear twice in s.
